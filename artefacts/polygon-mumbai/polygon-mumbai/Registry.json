{
  "address": "0xadAdd899F1096B77B6fE601748be1A7a9ADB714B",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract DAO",
          "name": "dao",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "NewDAORegistered",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "daos",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "contract DAO",
          "name": "dao",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7ec17bebf61965e531fb5c2a2fbe2da5a130c2ca06073f11b5d6fcd675c84c6f",
  "receipt": {
    "to": null,
    "from": "0x187a34c86aA6378333cE9033Aa34718D2CEdEd2C",
    "contractAddress": "0xadAdd899F1096B77B6fE601748be1A7a9ADB714B",
    "transactionIndex": 0,
    "gasUsed": "274227",
    "logsBloom": "0x
    "blockHash": "0x120a61fd187f6264adf33e0b6035c9b910713bf2de5eb52f1d1f72a1052fdca7",
    "transactionHash": "0x7ec17bebf61965e531fb5c2a2fbe2da5a130c2ca06073f11b5d6fcd675c84c6f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 25364757,
        "transactionHash": "0x7ec17bebf61965e531fb5c2a2fbe2da5a130c2ca06073f11b5d6fcd675c84c6f",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000187a34c86aa6378333ce9033aa34718d2ceded2c",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000026f851f4b34a690000000000000000000000000000000000000000000000000874b9929a3965fc00000000000000000000000000000000000000000000069548398d3f509e3ad3000000000000000000000000000000000000000000000000084dc140a5861b93000000000000000000000000000000000000000000000695486085914551853c",
        "logIndex": 0,
        "blockHash": "0x120a61fd187f6264adf33e0b6035c9b910713bf2de5eb52f1d1f72a1052fdca7"
      }
    ],
    "blockNumber": 25364757,
    "cumulativeGasUsed": "274227",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c4c707da39c5ddc6f134238ceb5472d9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract DAO\",\"name\":\"dao\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"NewDAORegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"daos\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"contract DAO\",\"name\":\"dao\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Samuel Furter - Aragon Association - 2021\",\"kind\":\"dev\",\"methods\":{\"register(string,address,address,address)\":{\"details\":\"A name is unique within the Aragon DAO framework and can get stored here\",\"params\":{\"dao\":\"The address of the DAO contract\",\"name\":\"The name of the DAO\"}}},\"title\":\"Register your unique DAO name\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"register(string,address,address,address)\":{\"notice\":\"Registers a DAO by his name\"}},\"notice\":\"This contract provides the possiblity to register a DAO by a unique name.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/registry/Registry.sol\":\"Registry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6287586f5e4a103c89d4dda41406136cdf283cc625bd1ebfdf1468aae5bfe449\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfd0d01e9036a03e50a71009749b9bfe7570a8f5b852ea409f794debfdd646dbd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x94f08740b99a0997bc8363edb752b38354f730a38c54eb7bdd38a8a22ff34aae\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is ERC1967Upgrade {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n}\\n\",\"keccak256\":\"0xe237a2794a6588efdbf8cf998283ad188ac0e32d5f3e1d7d8d286fdac82863bc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x53a0bb51b8a505e04aaf065de27c0e31cadf38194f8a9a6ec92b7bcd3c5826e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x842c66d5965ed0bf77f274732c2a93a7e2223d53171ec9cccc473bde75104ead\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x671741933530f343f023a40e58e61bc09d62494b96c6f3e39e647f315facd519\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7736c187e6f1358c1ea9350a2a21aa8528dec1c2f43b374a9067465a3a51f5d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5d874c66c21369dce8d3fe0b6c41316b0c289e45c0b4a77090c010ac2bb80e61\",\"license\":\"MIT\"},\"contracts/core/DAO.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./erc1271/ERC1271.sol\\\";\\nimport \\\"./erc165/AdaptiveERC165.sol\\\";\\nimport \\\"./acl/ACL.sol\\\";\\nimport \\\"./IDAO.sol\\\";\\n\\n/// @title The public interface of the Aragon DAO framework.\\n/// @author Samuel Furter - Aragon Association - 2021\\n/// @notice This contract is the entry point to the Aragon DAO framework and provides our users a simple and use to use public interface.\\n/// @dev Public API of the Aragon DAO framework\\ncontract DAO is IDAO, Initializable, UUPSUpgradeable, ACL, ERC1271, AdaptiveERC165 {\\n    using SafeERC20 for ERC20;\\n    using Address for address;\\n\\n    // Roles\\n    bytes32 public constant UPGRADE_ROLE = keccak256(\\\"UPGRADE_ROLE\\\");\\n    bytes32 public constant DAO_CONFIG_ROLE = keccak256(\\\"DAO_CONFIG_ROLE\\\");\\n    bytes32 public constant EXEC_ROLE = keccak256(\\\"EXEC_ROLE\\\");\\n    bytes32 public constant WITHDRAW_ROLE = keccak256(\\\"WITHDRAW_ROLE\\\");\\n    bytes32 public constant SET_SIGNATURE_VALIDATOR_ROLE = keccak256(\\\"SET_SIGNATURE_VALIDATOR_ROLE\\\");\\n\\n    // Error msg's\\n    string internal constant ERROR_ACTION_CALL_FAILED = \\\"ACTION_CALL_FAILED\\\";\\n    string internal constant ERROR_DEPOSIT_AMOUNT_ZERO = \\\"DEPOSIT_AMOUNT_ZERO\\\";\\n    string internal constant ERROR_ETH_DEPOSIT_AMOUNT_MISMATCH = \\\"ETH_DEPOSIT_AMOUNT_MISMATCH\\\";\\n    string internal constant ERROR_ETH_WITHDRAW_FAILED = \\\"ETH_WITHDRAW_FAILED\\\";\\n\\n    ERC1271 signatureValidator;\\n\\n    /// @dev Used for UUPS upgradability pattern\\n    /// @param _metadata IPFS hash that points to all the metadata (logo, description, tags, etc.) of a DAO\\n    function initialize(bytes calldata _metadata, address initialOwner) external initializer {\\n        _registerStandard(DAO_INTERFACE_ID);\\n        _registerStandard(type(ERC1271).interfaceId);\\n        _setMetadata(_metadata);\\n        ACL.initACL(initialOwner);\\n    }\\n\\n    /// @dev Used to check the permissions within the upgradability pattern implementation of OZ\\n    function _authorizeUpgrade(address) internal virtual override auth(address(this), UPGRADE_ROLE) {}\\n\\n    /// @notice Checks if the current callee has the permissions for.\\n    /// @dev Wrapper for the willPerform method of ACL to later on be able to use it in the modifier of the sub components of this DAO.\\n    /// @param _where Which contract does get called\\n    /// @param _who Who is calling this method\\n    /// @param _role Which role is required to call this\\n    /// @param _data Additional data used in the ACLOracle\\n    function hasPermission(\\n        address _where,\\n        address _who,\\n        bytes32 _role,\\n        bytes memory _data\\n    ) external override returns (bool) {\\n        return willPerform(_where, _who, _role, _data);\\n    }\\n\\n    /// @notice Update the DAO metadata\\n    /// @dev Sets a new IPFS hash\\n    /// @param _metadata The IPFS hash of the new metadata object\\n    function setMetadata(bytes calldata _metadata) external override auth(address(this), DAO_CONFIG_ROLE) {\\n        _setMetadata(_metadata);\\n    }\\n\\n    /// @notice If called, the list of provided actions will be executed.\\n    /// @dev It run a loop through the array of acctions and execute one by one.\\n    /// @dev If one acction fails, all will be reverted.\\n    /// @param _actions The aray of actions\\n    function execute(uint256 callId, Action[] memory _actions)\\n        external\\n        override\\n        auth(address(this), EXEC_ROLE)\\n        returns (bytes[] memory)\\n    {\\n        bytes[] memory execResults = new bytes[](_actions.length);\\n\\n        for (uint256 i = 0; i < _actions.length; i++) {\\n            (bool success, bytes memory response) = _actions[i].to.call{value: _actions[i].value}(_actions[i].data);\\n\\n            require(success, ERROR_ACTION_CALL_FAILED);\\n\\n            execResults[i] = response;\\n        }\\n\\n        emit Executed(msg.sender, callId, _actions, execResults);\\n\\n        return execResults;\\n    }\\n\\n    /// @dev Emit ETHDeposited event to track ETH deposits that weren't done over the deposit method.\\n    receive() external payable {\\n        emit ETHDeposited(msg.sender, msg.value);\\n    }\\n\\n    /// @dev Fallback to handle future versions of the ERC165 standard.\\n    fallback() external {\\n        _handleCallback(msg.sig, msg.data); // WARN: does a low-level return, any code below would be unreacheable\\n    }\\n\\n    /// @notice Deposit ETH or any token to this contract with a reference string\\n    /// @dev Deposit ETH (token address == 0) or any token with a reference\\n    /// @param _token The address of the token and in case of ETH address(0)\\n    /// @param _amount The amount of tokens to deposit\\n    /// @param _reference The deposit reference describing the reason of it\\n    function deposit(\\n        address _token,\\n        uint256 _amount,\\n        string calldata _reference\\n    ) external payable override {\\n        require(_amount > 0, ERROR_DEPOSIT_AMOUNT_ZERO);\\n\\n        if (_token == address(0)) {\\n            require(msg.value == _amount, ERROR_ETH_DEPOSIT_AMOUNT_MISMATCH);\\n        } else {\\n            ERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n        }\\n\\n        emit Deposited(msg.sender, _token, _amount, _reference);\\n    }\\n\\n    /// @notice Withdraw tokens or ETH from the DAO with a withdraw reference string\\n    /// @param _token The address of the token and in case of ETH address(0)\\n    /// @param _to The target address to send tokens or ETH\\n    /// @param _amount The amount of tokens to deposit\\n    /// @param _reference The deposit reference describing the reason of it\\n    function withdraw(\\n        address _token,\\n        address _to,\\n        uint256 _amount,\\n        string memory _reference\\n    ) external override auth(address(this), WITHDRAW_ROLE) {\\n        if (_token == address(0)) {\\n            (bool ok, ) = _to.call{value: _amount}(\\\"\\\");\\n            require(ok, ERROR_ETH_WITHDRAW_FAILED);\\n        } else {\\n            ERC20(_token).safeTransfer(_to, _amount);\\n        }\\n\\n        emit Withdrawn(_token, _to, _amount, _reference);\\n    }\\n\\n    /// @notice Setter to set the signature validator contract of ERC1271\\n    /// @param _signatureValidator ERC1271 SignatureValidator\\n    function setSignatureValidator(ERC1271 _signatureValidator)\\n        external\\n        auth(address(this), SET_SIGNATURE_VALIDATOR_ROLE)\\n    {\\n        signatureValidator = _signatureValidator;\\n    }\\n\\n    /// @notice Method to validate the signature as described in ERC1271\\n    /// @param _hash Hash of the data to be signed\\n    /// @param _signature Signature byte array associated with _hash\\n    /// @return bytes4\\n    function isValidSignature(bytes32 _hash, bytes memory _signature) external view override returns (bytes4) {\\n        if (address(signatureValidator) == address(0)) return bytes4(0); // invalid magic number\\n        return signatureValidator.isValidSignature(_hash, _signature); // forward call to set validation contract\\n    }\\n\\n    /// Private/Internal Functions\\n\\n    function _setMetadata(bytes calldata _metadata) internal {\\n        emit SetMetadata(_metadata);\\n    }\\n}\\n\",\"keccak256\":\"0x00b3703309c5690c8b54b8824f4aee3f0150a74c1351eb98ed1371df43d53b47\",\"license\":\"MIT\"},\"contracts/core/IDAO.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity 0.8.10;\\n\\n/// @title The interface required to have a DAO contract within the Aragon DAO framework\\n/// @author Samuel Furter - Aragon Association - 2022\\nabstract contract IDAO {\\n    bytes4 internal constant DAO_INTERFACE_ID = type(IDAO).interfaceId;\\n\\n    struct Action {\\n        address to; // Address to call.\\n        uint256 value; // Value to be sent with the call. for example (ETH)\\n        bytes data; // FuncSig + arguments\\n    }\\n\\n    /// @dev Required to handle the permissions within the whole DAO framework accordingly\\n    /// @param _where The address of the contract\\n    /// @param _who The address of a EOA or contract to give the permissions\\n    /// @param _role The hash of the role identifier\\n    /// @param _data The optional data passed to the ACLOracle registered.\\n    /// @return bool\\n    function hasPermission(\\n        address _where,\\n        address _who,\\n        bytes32 _role,\\n        bytes memory _data\\n    ) external virtual returns (bool);\\n\\n    /// @notice Update the DAO metadata\\n    /// @dev Sets a new IPFS hash\\n    /// @param _metadata The IPFS hash of the new metadata object\\n    function setMetadata(bytes calldata _metadata) external virtual;\\n\\n    event SetMetadata(bytes metadata);\\n\\n    /// @notice If called, the list of provided actions will be executed.\\n    /// @dev It run a loop through the array of acctions and execute one by one.\\n    /// @dev If one acction fails, all will be reverted.\\n    /// @param _actions The aray of actions\\n    function execute(uint256 callId, Action[] memory _actions) external virtual returns (bytes[] memory);\\n\\n    event Executed(address indexed actor, uint256 callId, Action[] actions, bytes[] execResults);\\n\\n    /// @notice Deposit ETH or any token to this contract with a reference string\\n    /// @dev Deposit ETH (token address == 0) or any token with a reference\\n    /// @param _token The address of the token and in case of ETH address(0)\\n    /// @param _amount The amount of tokens to deposit\\n    /// @param _reference The deposit reference describing the reason of it\\n    function deposit(\\n        address _token,\\n        uint256 _amount,\\n        string calldata _reference\\n    ) external payable virtual;\\n\\n    event Deposited(address indexed sender, address indexed token, uint256 amount, string _reference);\\n    // ETHDeposited and Deposited are both needed. ETHDeposited makes sure that whoever sends funds\\n    // with `send/transfer`, receive function can still be executed without reverting due to gas cost\\n    // increases in EIP-2929. To still use `send/transfer`, access list is needed that has the address\\n    // of the contract(base contract) that is behind the proxy.\\n    event ETHDeposited(address sender, uint256 amount);\\n\\n    /// @notice Withdraw tokens or ETH from the DAO with a withdraw reference string\\n    /// @param _token The address of the token and in case of ETH address(0)\\n    /// @param _to The target address to send tokens or ETH\\n    /// @param _amount The amount of tokens to deposit\\n    /// @param _reference The deposit reference describing the reason of it\\n    function withdraw(\\n        address _token,\\n        address _to,\\n        uint256 _amount,\\n        string memory _reference\\n    ) external virtual;\\n\\n    event Withdrawn(address indexed token, address indexed to, uint256 amount, string _reference);\\n}\\n\",\"keccak256\":\"0xf38b70bb9e7749a8c188ab9b7536e110accdaaeed9269da5f3df15cce5eedacb\",\"license\":\"MIT\"},\"contracts/core/acl/ACL.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./IACLOracle.sol\\\";\\n\\nlibrary ACLData {\\n    enum BulkOp { Grant, Revoke, Freeze }\\n\\n    struct BulkItem {\\n        BulkOp op;\\n        bytes32 role;\\n        address who;\\n    }\\n}\\n\\n/// @title The ACL used in the DAO contract to manage all permissions of a DAO.\\n/// @author Aragon Association - 2021\\n/// @notice This contract is used in the DAO contract and handles all the permissions of a DAO. This means it also handles the permissions of the processes or any custom component of the DAO.\\ncontract ACL is Initializable {\\n    // @notice the ROOT_ROLE identifier used \\n    bytes32 public constant ROOT_ROLE = keccak256(\\\"ROOT_ROLE\\\");\\n\\n    // \\\"Who\\\" constants\\n    address internal constant ANY_ADDR = address(type(uint160).max);\\n\\n    // \\\"Access\\\" flags\\n    address internal constant UNSET_ROLE = address(0);\\n    address internal constant ALLOW_FLAG = address(2);\\n        \\n    // hash(where, who, role) => Access flag(unset or allow) or ACLOracle (any other address denominates auth via ACLOracle)\\n    mapping (bytes32 => address) internal authPermissions;\\n    // hash(where, role) => true(role froze on the where), false(role is not frozen on the where)\\n    mapping (bytes32 => bool) internal freezePermissions;\\n\\n    // Events\\n    event Granted(bytes32 indexed role, address indexed actor, address indexed who, address where, IACLOracle oracle);\\n    event Revoked(bytes32 indexed role, address indexed actor, address indexed who, address where);\\n    event Frozen(bytes32 indexed role, address indexed actor, address where);\\n\\n    /// @dev The modifier used within the DAO framework to check permissions.\\n    //       Allows to set ROOT roles on specific contract or on the main, overal DAO.\\n    /// @param _where The contract that will be called\\n    /// @param _role The role required to call the method this modifier is applied\\n    modifier auth(address _where, bytes32 _role) {\\n        require(\\n            willPerform(_where, msg.sender, _role, msg.data) ||\\n            willPerform(address(this), msg.sender, _role, msg.data), \\n            \\\"acl: auth\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Init method to set the owner of the ACL\\n    /// @param _who The callee of the method\\n    function initACL(address _who) internal initializer {\\n        _initializeACL(_who);\\n    }\\n    \\n    /// @dev Method to grant permissions for a role on a contract to a address\\n    /// @param _where The address of the contract\\n    /// @param _who The address of a EOA or contract to give the permissions\\n    /// @param _role The hash of the role identifier\\n    function grant(address _where, address _who, bytes32 _role) external auth(_where, ROOT_ROLE) {\\n        _grant(_where, _who, _role);\\n    }\\n\\n    /// @dev This method is used to grant access on a method of a contract based on a ACLOracle that allows us to have more dynamic permissions management.\\n    /// @param _where The address of the contract\\n    /// @param _who The address of a EOA or contract to give the permissions\\n    /// @param _role The hash of the role identifier\\n    /// @param _oracle The ACLOracle responsible for this role on a specific method of a contract\\n    function grantWithOracle(address _where, address _who, bytes32 _role, IACLOracle _oracle) external auth(_where, ROOT_ROLE) {\\n        _grantWithOracle(_where, _who, _role, _oracle);\\n    }\\n\\n    /// @dev Method to revoke permissions of a address for a role of a contract\\n    /// @param _where The address of the contract\\n    /// @param _who The address of a EOA or contract to give the permissions\\n    /// @param _role The hash of the role identifier\\n    function revoke(address _where, address _who, bytes32 _role) external auth(_where, ROOT_ROLE) {\\n        _revoke(_where, _who, _role);\\n    }\\n\\n    /// @dev Method to freeze a role of a contract\\n    /// @param _where The address of the contract\\n    /// @param _role The hash of the role identifier\\n    function freeze(address _where, bytes32 _role) external auth(_where, ROOT_ROLE) {\\n        _freeze(_where, _role);\\n    }\\n\\n    /// @dev Method to do bulk operations on the ACL\\n    /// @param _where The address of the contract\\n    /// @param items A list of ACL operations to do\\n    function bulk(address _where, ACLData.BulkItem[] calldata items) external auth(_where, ROOT_ROLE) {\\n        for (uint256 i = 0; i < items.length; i++) {\\n            ACLData.BulkItem memory item = items[i];\\n\\n            if (item.op == ACLData.BulkOp.Grant) _grant(_where, item.who, item.role);\\n            else if (item.op == ACLData.BulkOp.Revoke) _revoke(_where, item.who, item.role);\\n            else if (item.op == ACLData.BulkOp.Freeze) _freeze(_where, item.role);\\n        }\\n    }\\n\\n    /// @dev This method is used to check if a callee has the permissions for. It is public to simplify the code within the DAO framework.\\n    /// @param _where The address of the contract\\n    /// @param _who The address of a EOA or contract to give the permissions\\n    /// @param _role The hash of the role identifier\\n    /// @param _data The optional data passed to the ACLOracle registered.\\n    /// @return bool\\n    function willPerform(address _where, address _who, bytes32 _role, bytes memory _data) public returns (bool) {\\n        return _checkRole(_where, _who, _role, _data) // check if _who is eligible for _role on _where\\n            || _checkRole(_where, ANY_ADDR, _role, _data) // check if anyone is eligible for _role on _where\\n            || _checkRole(ANY_ADDR, _who, _role, _data); // check if _who is eligible for _role on any contract.\\n    }\\n\\n    /// @dev This method is used to check if a given role on a contract is frozen\\n    /// @param _where The address of the contract\\n    /// @param _role The hash of the role identifier\\n    /// @return bool Return true or false depending if it is frozen or not\\n    function isFrozen(address _where, bytes32 _role) public view returns (bool) {\\n        return freezePermissions[freezeHash(_where, _role)];\\n    }\\n\\n    /// @dev This method is internally used to grant the ROOT_ROLE on initialization of the ACL\\n    /// @param _who The address of a EOA or contract to give the permissions\\n    function _initializeACL(address _who) internal {\\n        _grant(address(this), _who, ROOT_ROLE);\\n    }\\n\\n    /// @dev This method is used in the public grant method of the ACL\\n    /// @param _where The address of the contract\\n    /// @param _who The address of a EOA or contract to give the permissions\\n    /// @param _role The hash of the role identifier\\n    function _grant(address _where, address _who, bytes32 _role) internal {\\n        _grantWithOracle(_where, _who, _role, IACLOracle(ALLOW_FLAG));\\n    }\\n\\n    /// @dev This method is used in the internal _grant method of the ACL\\n    /// @param _where The address of the contract\\n    /// @param _who The address of a EOA or contract to give the permissions\\n    /// @param _role The hash of the role identifier\\n    /// @param _oracle The ACLOracle to be used or it is just the ALLOW_FLAG\\n    function _grantWithOracle(address _where, address _who, bytes32 _role, IACLOracle _oracle) internal {\\n        require(!isFrozen(_where, _role), \\\"acl: frozen\\\");\\n\\n        bytes32 permission = permissionHash(_where, _who, _role);\\n        require(authPermissions[permission] == UNSET_ROLE, \\\"acl: role already granted\\\");\\n        authPermissions[permission] = address(_oracle);\\n\\n        emit Granted(_role, msg.sender, _who, _where, _oracle);\\n    }\\n\\n    /// @dev This method is used in the public revoke method of the ACL\\n    /// @param _where The address of the contract\\n    /// @param _who The address of a EOA or contract to give the permissions\\n    /// @param _role The hash of the role identifier\\n    function _revoke(address _where, address _who, bytes32 _role) internal {\\n        require(!isFrozen(_where, _role), \\\"acl: frozen\\\");\\n\\n        bytes32 permission = permissionHash(_where, _who, _role);\\n        require(authPermissions[permission] != UNSET_ROLE, \\\"acl: role already revoked\\\");\\n        authPermissions[permission] = UNSET_ROLE;\\n\\n        emit Revoked(_role, msg.sender, _who, _where);\\n    }\\n\\n    /// @dev This method is used in the public freeze method of the ACL\\n    /// @param _where The address of the contract\\n    /// @param _role The hash of the role identifier\\n    function _freeze(address _where, bytes32 _role) internal {\\n        bytes32 permission = freezeHash(_where, _role);\\n        require(!freezePermissions[permission], \\\"acl: role already freeze\\\");\\n        freezePermissions[freezeHash(_where, _role)] = true;\\n\\n        emit Frozen(_role, msg.sender, _where);\\n    }\\n\\n    /// @dev This method is used in the public willPerform method of the ACL.\\n    /// @param _where The address of the contract\\n    /// @param _who The address of a EOA or contract to give the permissions\\n    /// @param _role The hash of the role identifier\\n    /// @param _data The optional data passed to the ACLOracle registered.\\n    /// @return bool\\n    function _checkRole(address _where, address _who, bytes32 _role, bytes memory _data) internal returns (bool) {\\n        address accessFlagOrAclOracle = authPermissions[permissionHash(_where, _who, _role)];\\n        \\n        if (accessFlagOrAclOracle == UNSET_ROLE) return false;\\n        if (accessFlagOrAclOracle == ALLOW_FLAG) return true;\\n\\n        // Since it's not a flag, assume it's an ACLOracle and try-catch to skip failures\\n        try IACLOracle(accessFlagOrAclOracle).willPerform(_where, _who, _role, _data) returns (bool allowed) {\\n            if (allowed) return true;\\n        } catch { }\\n        \\n        return false;\\n    }\\n\\n    /// @dev This internal method is used to generate the hash for the authPermissions mapping based on the target contract, the address to grant permissions, and the role identifier.\\n    /// @param _where The address of the contract\\n    /// @param _who The address of a EOA or contract to give the permissions\\n    /// @param _role The hash of the role identifier\\n    /// @return bytes32 The hash of the permissions\\n    function permissionHash(address _where, address _who, bytes32 _role) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"PERMISSION\\\", _who, _where, _role));\\n    }\\n\\n    /// @dev This internal method is used to generate the hash for the freezePermissions mapping based on the target contract and the role identifier.\\n    /// @param _where The address of the contract\\n    /// @param _role The hash of the role identifier\\n    /// @return bytes32 The freeze hash used in the freezePermissions mapping\\n    function freezeHash(address _where, bytes32 _role) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"FREEZE\\\", _where, _role));\\n    }\\n}\\n\",\"keccak256\":\"0xa2502322a4d41e88e4fe7c4dbcc899e83da188f110c0d6f81c644fbd9491750e\",\"license\":\"MIT\"},\"contracts/core/acl/IACLOracle.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity 0.8.10;\\n\\n/// @title The IACLOracle to have dynamic permissions\\n/// @author Aragon Association - 2021\\n/// @notice This contract used to have dynamic permissions as for example that only users with a token X can do Y.\\ninterface IACLOracle {\\n    // @dev This method is used to check if a callee has the permissions for.\\n    // @param _where The address of the contract\\n    // @param _who The address of a EOA or contract to give the permissions\\n    // @param _role The hash of the role identifier\\n    // @param _data The optional data passed to the ACLOracle registered.\\n    // @return bool\\n    function willPerform(address _where, address _who, bytes32 _role, bytes calldata _data) external returns (bool allowed);\\n}\\n\",\"keccak256\":\"0x17715100b854361758a82d63a65f4c6c429211de66e20a0a9a82a4088d5ad24e\",\"license\":\"MIT\"},\"contracts/core/erc1271/ERC1271.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity 0.8.10;\\n\\n\\n/// @title ERC1271 interface\\n/// @dev see https://eips.ethereum.org/EIPS/eip-1271\\nabstract contract ERC1271 {\\n    // bytes4(keccak256(\\\"isValidSignature(bytes32,bytes)\\\")\\n    bytes4 constant internal MAGICVALUE = 0x1626ba7e;\\n    \\n    /**\\n     * MUST return the bytes4 magic value 0x1626ba7e when function passes.\\n     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n     * MUST allow external calls\\n     */\\n    /// @dev Should return whether the signature provided is valid for the provided data\\n    /// @param _hash Keccak256 hash of arbitrary length data signed on the behalf of address(this)\\n    /// @param _signature Signature byte array associated with _data\\n    /// @return magicValue The bytes4 magic value 0x1626ba7e when function passes\\n    function isValidSignature(bytes32 _hash, bytes memory _signature) virtual external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x19b0a30cc8b3690e8e19c0a7cc7614ddd1c58c5060dda80c2f196fc7e2688087\",\"license\":\"MIT\"},\"contracts/core/erc165/AdaptiveERC165.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./ERC165.sol\\\";\\n\\n/// @title AdaptiveERC165\\n/// @author Aragon Association - 2022\\ncontract AdaptiveERC165 is ERC165 {\\n    /// @dev ERC165 interface ID -> whether it is supported\\n    mapping (bytes4 => bool) internal standardSupported;\\n\\n    /// @dev Callback function signature -> magic number to return\\n    mapping (bytes4 => bytes32) internal callbackMagicNumbers;\\n\\n    bytes32 internal constant UNREGISTERED_CALLBACK = bytes32(0);\\n\\n    event RegisteredStandard(bytes4 interfaceId);\\n    event RegisteredCallback(bytes4 sig, bytes4 magicNumber);\\n    event ReceivedCallback(bytes4 indexed sig, bytes data);\\n\\n    /// @dev Method to check if the contract supports a specific interface or not\\n    /// @param _interfaceId The identifier of the interface to check for\\n    function supportsInterface(bytes4 _interfaceId) override virtual public view returns (bool) {\\n        return standardSupported[_interfaceId] || super.supportsInterface(_interfaceId);\\n    }\\n\\n    /// @dev This method is existing to be able to support future versions of the ERC165 or similar without upgrading the contracts.\\n    /// @param _sig The function signature of the called method. (msg.sig)\\n    /// @param _data The data resp. arguments passed to the method\\n    function _handleCallback(bytes4 _sig, bytes memory _data) internal {\\n        bytes32 magicNumber = callbackMagicNumbers[_sig];\\n        require(magicNumber != UNREGISTERED_CALLBACK, \\\"adap-erc165: unknown callback\\\");\\n\\n        emit ReceivedCallback(_sig, _data);\\n\\n        // low-level return magic number\\n        assembly {\\n            mstore(0x00, magicNumber)\\n            return(0x00, 0x20)\\n        }\\n    }\\n\\n    /// @dev Registers a standard and also callback\\n    /// @param _interfaceId The identifier of the interface to check for\\n    /// @param _callbackSig The function signature of the called method. (msg.sig)\\n    /// @param _magicNumber The data resp. arguments passed to the method\\n    function _registerStandardAndCallback(bytes4 _interfaceId, bytes4 _callbackSig, bytes4 _magicNumber) internal {\\n        _registerStandard(_interfaceId);\\n        _registerCallback(_callbackSig, _magicNumber);\\n    }\\n\\n    /// @dev Registers a standard resp. interface type\\n    /// @param _interfaceId The identifier of the interface to check for\\n    function _registerStandard(bytes4 _interfaceId) internal {\\n        standardSupported[_interfaceId] = true;\\n        emit RegisteredStandard(_interfaceId);\\n    }\\n\\n    /// @dev Registers a callback\\n    /// @param _callbackSig The function signature of the called method. (msg.sig)\\n    /// @param _magicNumber The data resp. arguments passed to the method\\n    function _registerCallback(bytes4 _callbackSig, bytes4 _magicNumber) internal {\\n        callbackMagicNumbers[_callbackSig] = _magicNumber;\\n        emit RegisteredCallback(_callbackSig, _magicNumber);\\n    }\\n}\\n\",\"keccak256\":\"0xa0f6baeb0a0dc2d490083bfd290557139dbb65a0226c39dc831d7c3fc1a2c399\",\"license\":\"MIT\"},\"contracts/core/erc165/ERC165.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity 0.8.10;\\n\\n/// @title ERC165\\n/// @author Aragon Association - 2022\\nabstract contract ERC165 {\\n    // Includes supportsInterface method:\\n    bytes4 internal constant ERC165_INTERFACE_ID = bytes4(0x01ffc9a7);\\n\\n    /**\\n    * @dev Query if a contract implements a certain interface\\n    * @param _interfaceId The interface identifier being queried, as specified in ERC-165\\n    * @return True if the contract implements the requested interface and if its not 0xffffffff, false otherwise\\n    */\\n    function supportsInterface(bytes4 _interfaceId) virtual public view returns (bool) {\\n        return _interfaceId == ERC165_INTERFACE_ID;\\n    }\\n}\\n\",\"keccak256\":\"0x70e9ce24c3b397bd635cc626e61b46d6a4ab54d59316f656f1672bf55e0de991\",\"license\":\"MIT\"},\"contracts/registry/Registry.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"../core/DAO.sol\\\";\\n\\n/// @title Register your unique DAO name\\n/// @author Samuel Furter - Aragon Association - 2021\\n/// @notice This contract provides the possiblity to register a DAO by a unique name.\\ncontract Registry {\\n    event NewDAORegistered(DAO indexed dao, address indexed creator, address indexed token, string name);\\n\\n    mapping(string => bool) public daos;\\n\\n    /// @notice Registers a DAO by his name\\n    /// @dev A name is unique within the Aragon DAO framework and can get stored here\\n    /// @param name The name of the DAO\\n    /// @param dao The address of the DAO contract\\n    function register(string calldata name, DAO dao, address creator, address token) external {\\n        require(daos[name] == false, \\\"name already in use\\\");\\n\\n        daos[name] = true;\\n        \\n        emit NewDAORegistered(dao, creator, token, name);\\n    }\\n}\\n\",\"keccak256\":\"0x3c7e193f1647201c59ec745449254d8a6a1a7dfc253e58d2f9f753c28ca76953\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610403806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063e12ea8ba1461003b578063e1b8bcdb1461007d575b600080fd5b61006961004936600461020f565b805160208183018101805160008252928201919093012091525460ff1681565b604051901515815260200160405180910390f35b61009061008b3660046102e5565b610092565b005b600085856040516100a492919061038e565b9081526040519081900360200190205460ff1615610122576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f6e616d6520616c726561647920696e2075736500000000000000000000000000604482015260640160405180910390fd5b60016000868660405161013692919061038e565b908152602001604051809103902060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f0e1cad7f0778337c31dbd85ec582e66659fc95110888f28357e5c0a926d940a588886040516101d192919061039e565b60405180910390a45050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006020828403121561022157600080fd5b813567ffffffffffffffff8082111561023957600080fd5b818401915084601f83011261024d57600080fd5b81358181111561025f5761025f6101e0565b604051601f8201601f19908116603f01168101908382118183101715610287576102876101e0565b816040528281528760208487010111156102a057600080fd5b826020860160208301376000928101602001929092525095945050505050565b73ffffffffffffffffffffffffffffffffffffffff811681146102e257600080fd5b50565b6000806000806000608086880312156102fd57600080fd5b853567ffffffffffffffff8082111561031557600080fd5b818801915088601f83011261032957600080fd5b81358181111561033857600080fd5b89602082850101111561034a57600080fd5b60209283019750955050860135610360816102c0565b92506040860135610370816102c0565b91506060860135610380816102c0565b809150509295509295909350565b8183823760009101908152919050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f1916010191905056fea26469706673582212205979d44217398a7b09a7a12172a4cafbac9ed6114905a2fd805414e8be66506c64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063e12ea8ba1461003b578063e1b8bcdb1461007d575b600080fd5b61006961004936600461020f565b805160208183018101805160008252928201919093012091525460ff1681565b604051901515815260200160405180910390f35b61009061008b3660046102e5565b610092565b005b600085856040516100a492919061038e565b9081526040519081900360200190205460ff1615610122576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f6e616d6520616c726561647920696e2075736500000000000000000000000000604482015260640160405180910390fd5b60016000868660405161013692919061038e565b908152602001604051809103902060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f0e1cad7f0778337c31dbd85ec582e66659fc95110888f28357e5c0a926d940a588886040516101d192919061039e565b60405180910390a45050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006020828403121561022157600080fd5b813567ffffffffffffffff8082111561023957600080fd5b818401915084601f83011261024d57600080fd5b81358181111561025f5761025f6101e0565b604051601f8201601f19908116603f01168101908382118183101715610287576102876101e0565b816040528281528760208487010111156102a057600080fd5b826020860160208301376000928101602001929092525095945050505050565b73ffffffffffffffffffffffffffffffffffffffff811681146102e257600080fd5b50565b6000806000806000608086880312156102fd57600080fd5b853567ffffffffffffffff8082111561031557600080fd5b818801915088601f83011261032957600080fd5b81358181111561033857600080fd5b89602082850101111561034a57600080fd5b60209283019750955050860135610360816102c0565b92506040860135610370816102c0565b91506060860135610380816102c0565b809150509295509295909350565b8183823760009101908152919050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f1916010191905056fea26469706673582212205979d44217398a7b09a7a12172a4cafbac9ed6114905a2fd805414e8be66506c64736f6c634300080a0033",
  "devdoc": {
    "author": "Samuel Furter - Aragon Association - 2021",
    "kind": "dev",
    "methods": {
      "register(string,address,address,address)": {
        "details": "A name is unique within the Aragon DAO framework and can get stored here",
        "params": {
          "dao": "The address of the DAO contract",
          "name": "The name of the DAO"
        }
      }
    },
    "title": "Register your unique DAO name",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "register(string,address,address,address)": {
        "notice": "Registers a DAO by his name"
      }
    },
    "notice": "This contract provides the possiblity to register a DAO by a unique name.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7984,
        "contract": "contracts/registry/Registry.sol:Registry",
        "label": "daos",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}